<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>volatile关键字解析</title>
      <link href="/2018/04/10/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/04/10/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本小白原来就对volatile关键字有所了解,但一直没有潜心钻研,今天承蒙Cat73大神点拨sun.misc.unsafe包的使用,进而研究cas锁,之后发现还要仔细研究一下volatile关键字才行,我将分三篇博文依次讲解volatile,cas锁,unsafe包.废话不多说,上干货!</p><h4 id="1-Java的内存模型"><a href="#1-Java的内存模型" class="headerlink" title="1 Java的内存模型"></a>1 Java的内存模型</h4><p>想要理解volatile关键字,需要先了解java的内存模型.</p><p>Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成.</p><p><img src="/2018/04/10/volatile关键字解析/volatile/javamemorymodel.png" alt="java内存模型"></p><p>基于此种内存模型，便产生了多线程编程中的数据“脏读”等问题。</p><p>举个简单的例子：在java中，执行下面这个语句：</p><pre><code>i  = 10++;</code></pre><p>执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p><p>比如同时有2个线程执行这段代码，假如初始时i的值为10，那么我们希望两个线程执行完之后i的值变为12。但是事实会是这样吗？</p><p>可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的工作内存当中，然后线程1进行加1操作，然后把i的最新值11写入到内存。此时线程2的工作内存当中i的值还是10，进行加1操作之后，i的值为11，然后线程2把i的值写入内存。</p><p>最终结果i的值是11，而不是12。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p><p>那么如何确保共享变量在多线程访问时能够正确输出结果呢？</p><p>在解决这个问题之前，我们要先了解并发编程的三大概念：原子性，有序性，可见性。</p><h4 id="2-原子性"><a href="#2-原子性" class="headerlink" title="2 原子性"></a>2 原子性</h4><h5 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h5><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><h5 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h5><p>熟悉数据库事务的童鞋肯定知道银行转账案例,A向B转账1000块,需要将A的账户减1000,B的账户加1000,如果将A账户减操作之后操作终止了,B没有收到1000块,这个示例就说明了原子性的意义,两个或多个操作需要串行执行切不能中间终止,如果中间停止,需要恢复到为执行操作的状态,也就是A的账户再加上1000.</p><h5 id="2-3-java中的原子性"><a href="#2-3-java中的原子性" class="headerlink" title="2.3 java中的原子性"></a>2.3 java中的原子性</h5><p>在java中,对变量的读取和赋值操作是原子性操作,既这个操作是不可中断的,要么执行,要么回退到之前的状态.<br>举个例子:</p><pre><code>x = 10;         //语句1y = x;         //语句2x++;           //语句3x = x + 1;     //语句4</code></pre><p>以上4个语句中只有1是原子性操作<br>语句1是给变量x赋值10,只需要一步<br>语句2需要先读取x的值在将x的值赋值给y,这是两步原子性操作,合起来就不是原子性操作了.<br>语句3和语句4需要读取x的值,对值+1,将值赋给x,共三个原子性操作.</p><p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><p>关于synchronized和Lock的使用，参考：<a href="https://www.jianshu.com/p/96c89e6e7e90" target="_blank" rel="noopener">关于synchronized和ReentrantLock之多线程同步详解</a></p><h4 id="3-可见性"><a href="#3-可见性" class="headerlink" title="3 可见性"></a>3 可见性</h4><h5 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h5><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><h5 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h5><pre><code>//线程1执行的代码int i = 0;i = 10;//线程2执行的代码j = i;</code></pre><p>i变量被放入java内存,而i=10的赋值被放入线程1的缓存中,可能未更新到java缓存中,这种情况下线程1对i的修改对线程2来说是不可见的.</p><h5 id="3-3-java中的可见性"><a href="#3-3-java中的可见性" class="headerlink" title="3.3 java中的可见性"></a>3.3 java中的可见性</h5><p>对于可见性，Java提供了volatile关键字来保证可见性。</p><p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h4 id="4-有序性"><a href="#4-有序性" class="headerlink" title="4 有序性"></a>4 有序性</h4><h5 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h5><p>有序性：即程序执行的顺序按照代码的先后顺序执行。</p><h5 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2 示例"></a>4.2 示例</h5><pre><code>int i = 0;              boolean flag = false;i = 1;                //语句1  flag = true;          //语句2</code></pre><p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p><p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。</p><p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</p><pre><code>int a = 10;    //语句1int r = 2;    //语句2a = a + 3;    //语句3r = a*a;     //语句4</code></pre><p>这段代码有4个语句，那么可能的一个执行顺序是：</p><p><img src="/2018/04/10/volatile关键字解析/volatile/order.jpg" alt="java内存模型"></p><p>那么可不可能是这个执行顺序呢： 语句2 语句1 语句4 语句3</p><p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</p><p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p><pre><code>//线程1:context = loadContext();   //语句1inited = true;             //语句2 //线程2:while(!inited ){   sleep()}doSomethingwithconfig(context);</code></pre><p>上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p><p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h5 id="4-3-Java中的有序性"><a href="#4-3-Java中的有序性" class="headerlink" title="4.3 Java中的有序性"></a>4.3 Java中的有序性</h5><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p>另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>下面就来具体介绍下happens-before原则（先行发生原则）：<br>①程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</p><p>②锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作</p><p>③volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</p><p>④传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</p><p>⑤线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</p><p>⑥线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</p><p>⑦线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</p><p>⑧对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</p><p>这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。</p><p>下面我们来解释一下前4条规则：</p><p>对于程序次序规则来说，就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，但是虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p><p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果处于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p><p>第三条规则是一条比较重要的规则。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>第四条规则实际上就是体现happens-before原则具备传递性。</p><h4 id="5-深入volatile关键字"><a href="#5-深入volatile关键字" class="headerlink" title="5 深入volatile关键字"></a>5 深入volatile关键字</h4><h5 id="5-1-volatile保证可见性"><a href="#5-1-volatile保证可见性" class="headerlink" title="5.1 volatile保证可见性"></a>5.1 volatile保证可见性</h5><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><p>1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>2）禁止进行指令重排序。</p><p>先看一段代码，假如线程1先执行，线程2后执行：</p><pre><code>//线程1boolean stop = false;while(!stop){    doSomething();}//线程2stop = true;</code></pre><p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p><p>那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p><p>但是用volatile修饰之后就变得不一样了：</p><p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p><p>那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>那么线程1读取到的就是最新的正确的值。</p><h5 id="5-2-volatile不能确保原子性"><a href="#5-2-volatile不能确保原子性" class="headerlink" title="5.2 volatile不能确保原子性"></a>5.2 volatile不能确保原子性</h5><pre><code>public class Test {    public volatile int inc = 0;    public void increase() {        inc++;    }    public static void main(String[] args) {        final Test test = new Test();        for(int i=0;i&lt;10;i++){            new Thread(){                public void run() {                    for(int j=0;j&lt;1000;j++)                        test.increase();                };            }.start();        }        while(Thread.activeCount()&gt;1)  //保证前面的线程都执行完            Thread.yield();        System.out.println(test.inc);    }}</code></pre><p>以上代码的结果是一个小于10000的数.</p><p>可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p><p>这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>假如某个时刻变量inc的值为10，</p><p>线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，也不会导致主存中的值刷新，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p><p>然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p><p>那么两个线程分别进行了一次自增操作后，inc只增加了1。</p><p>根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p><p>解决方案：可以通过synchronized或lock，进行加锁，来保证操作的原子性。也可以通过AtomicInteger。</p><p>在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p><h5 id="5-3-volatile保证有序性"><a href="#5-3-volatile保证有序性" class="headerlink" title="5.3 volatile保证有序性"></a>5.3 volatile保证有序性</h5><p>在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p><p>volatile关键字禁止指令重排序有两层意思：</p><p>1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</p><p>2）在进行指令优化时，不能将在对volatile变量的读操作或者写操作的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p><p>可能上面说的比较绕，举个简单的例子：</p><pre><code>//x、y为非volatile变量//flag为volatile变量x = 2;        //语句1y = 0;        //语句2flag = true;  //语句3x = 4;         //语句4y = -1;       //语句5</code></pre><p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p><p>并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p><p>那么我们回到前面举的一个例子：</p><pre><code>//线程1:context = loadContext();   //语句1inited = true;             //语句2//线程2:while(!inited ){  sleep()}doSomethingwithconfig(context);</code></pre><p>前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p><p>这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p><h4 id="6-volatile的实现原理"><a href="#6-volatile的实现原理" class="headerlink" title="6 volatile的实现原理"></a>6 volatile的实现原理</h4><h5 id="6-1-可见性"><a href="#6-1-可见性" class="headerlink" title="6.1 可见性"></a>6.1 可见性</h5><p>处理器为了提高处理速度，不直接和内存进行通讯，而是将系统内存的数据独到内部缓存后再进行操作，但操作完后不知什么时候会写到内存。</p><p>如果对声明了volatile变量进行写操作时，JVM会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写会到系统内存。 这一步确保了如果有其他线程对声明了volatile变量进行修改，则立即更新主内存中数据。</p><p>但这时候其他处理器的缓存还是旧的，所以在多处理器环境下，为了保证各个处理器缓存一致，每个处理会通过嗅探在总线上传播的数据来检查 自己的缓存是否过期，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作时，会强制重新从系统内存把数据读到处理器缓存里。 这一步确保了其他线程获得的声明了volatile变量都是从主内存中获取最新的。</p><h5 id="6-2-有序性"><a href="#6-2-有序性" class="headerlink" title="6.2 有序性"></a>6.2 有序性</h5><p>Lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 关键字 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HelloWorld</title>
      <link href="/2018/04/02/helloWorld/"/>
      <url>/2018/04/02/helloWorld/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为各种网络环境因素,本小白经过三天鏖战终于成功使用github+hexo搭建个人博客,作为博客的第一篇文章,我就分享一下我的搭建历程,希望对后来人有所帮助.</p><a id="more"></a><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h4><ul><li>系统版本 win10 专业版</li><li>github账号</li><li>Node.js环境</li><li>安装git环境</li></ul><h4 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2 创建github仓库"></a>2 创建github仓库</h4><p>首先,你需要创建一个github仓库,并以固定格式命名(<strong>用户名.github.io</strong>),仓库创建之后大概半小时内生效,创建成功后会有一下示例代码,此时你可以直接访问<strong>https://用户名.github.io</strong>查看你的公开仓库</p><h4 id="3-配置ssh-key"><a href="#3-配置ssh-key" class="headerlink" title="3 配置ssh key"></a>3 配置ssh key</h4><p>ssh key主要用来解决本地和服务器的链接问题.<br>    $ cd ~/.ssh #检查本机已存在的ssh秘钥<br>如果提示:No such file or directory 说明你是第一次使用git.<br>    ssh-keygen -t rsa -C “邮件地址”<br>然后连续三次回车后,会在用户目录生成一个文件,打开用户目录,找到<code>.ssh\id_rsa.pub</code>,用记事本打开并复制内容,之后进入github主页setting的<code>SSH and GPG keys</code><br><img src="/2018/04/02/helloWorld/1-createBlog-newssh.png" alt="SSH and GPG keys"><br>点击new SSH key后 title随便取,将文件的内容粘贴到key中保存</p><h5 id="3-1-测试是否成功"><a href="#3-1-测试是否成功" class="headerlink" title="3.1 测试是否成功"></a>3.1 测试是否成功</h5><pre><code>$ ssh -T git@github.com # 注意邮箱地址不用改</code></pre><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>,输入yes,如果看到</p><pre><code>Hi hgsghost! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>说明SSH配置成功,之后还要配置:</p><pre><code>$ git config --global user.name &quot;hgsghost&quot;// 你的github用户名，非昵称$ git config --global user.email  &quot;xxx@gmail.com&quot;// 填写你的github注册邮箱</code></pre><h4 id="4-hexo搭建博客"><a href="#4-hexo搭建博客" class="headerlink" title="4 hexo搭建博客"></a>4 hexo搭建博客</h4><h5 id="4-1-hexo简介"><a href="#4-1-hexo简介" class="headerlink" title="4.1 hexo简介"></a>4.1 hexo简介</h5><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h5 id="4-2-博客原理"><a href="#4-2-博客原理" class="headerlink" title="4.2 博客原理"></a>4.2 博客原理</h5><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h5 id="4-3-hexo安装前提"><a href="#4-3-hexo安装前提" class="headerlink" title="4.3 hexo安装前提"></a>4.3 hexo安装前提</h5><p>机器需要有node.js的环境,如果未安装node.js,可以参考 <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">node.js安装教程</a>安装.安装后再gitbash中运行<code>node --version</code> 可能会出现 <code>ReferenceError: version is not defined</code><br>并不会影响hexo正常使用</p><h5 id="4-4-hexo安装"><a href="#4-4-hexo安装" class="headerlink" title="4.4 hexo安装"></a>4.4 hexo安装</h5><pre><code>$ npm install -g hexo</code></pre><h5 id="4-5-hexo初始化"><a href="#4-5-hexo初始化" class="headerlink" title="4.5 hexo初始化"></a>4.5 hexo初始化</h5><p>在电脑的某个路径下新建hexo文件夹,这个文件夹是将来你放你的博客静态代码的地方,最好是比较好找的路径.</p><pre><code>$ cd /d/gitblog/hexohexo init</code></pre><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图:<br><img src="/2018/04/02/helloWorld/1-createBlog-hexoinit.png" alt="hexo目录"></p><pre><code>$ hexo g # 生成$ hexo s # 启动服务</code></pre><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的.</p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p><p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：<br><img src="/2018/04/02/helloWorld/1-createBlog-hexoTheme.png" alt="hexo目录"></p><h5 id="4-6-修改主题"><a href="#4-6-修改主题" class="headerlink" title="4.6 修改主题"></a>4.6 修改主题</h5><p>如果觉得默认主题不好看,我们可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>找一个好看的替换掉.</p><p><img src="/2018/04/02/helloWorld/1-createBlog-themeaath.png" alt="hexo目录"></p><p>例如我喜欢Aath这个主题,点击进入博客寻找这个主题的github地址,一般在关于中可以找到(也可能在别的地方)</p><p><img src="/2018/04/02/helloWorld/1-createBlog-themegithub.png" alt="hexo目录"></p><p>进入github地址,找到相应的主题进入</p><p><img src="/2018/04/02/helloWorld/1-createBlog-githubrepositories.png" alt="hexo目录"></p><p>使用git下载相应的主题</p><p><img src="/2018/04/02/helloWorld/1-createBlog-githubcopyurl.png" alt="hexo目录"></p><pre><code>$ cd /d/gitblog/hexo$ git clone https://github.com/lewis-geek/hexo-theme-Aath.git theme/aath</code></pre><p>修改hexo目录下的 <code>_config.yml</code> 文件中的 <code>theme: landscape</code> 改为 <code>theme: aath</code></p><pre><code>注意: 主题theme文件夹下也有`_config.yml`文件,我们要修改的是hexo中的`_config.yml`文件,修改的属性:后边有个空格.</code></pre><p>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p><h5 id="4-7-上传之前"><a href="#4-7-上传之前" class="headerlink" title="4.7 上传之前"></a>4.7 上传之前</h5><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h5 id="4-8-上传"><a href="#4-8-上传" class="headerlink" title="4.8 上传"></a>4.8 上传</h5><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><pre><code>deploy:type: gitrepository: git@github.com:hgsghost/hgsghost.github.io.gitbranch: master</code></pre><p>错误写法：</p><pre><code>deploy:type: githubrepository: https://github.com/hgsghost/hgsghost.github.iobranch: master</code></pre><p>此时直接执行hexo d的话一般会报如下错误：</p><pre><code>Deployer not found: github 或者 Deployer not found: git</code></pre><p>原因是还需要安装一个插件：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><p><img src="/2018/04/02/helloWorld/1-createBlog-hexodeploy.png" alt="hexo目录"></p><h5 id="4-9-保留CNAME-README等文件"><a href="#4-9-保留CNAME-README等文件" class="headerlink" title="4.9 保留CNAME,README等文件"></a>4.9 保留CNAME,README等文件</h5><p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的.</p><p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p><h5 id="4-10-常用hexo命令"><a href="#4-10-常用hexo命令" class="headerlink" title="4.10 常用hexo命令"></a>4.10 常用hexo命令</h5><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><h5 id="4-11-写博客"><a href="#4-11-写博客" class="headerlink" title="4.11 写博客"></a>4.11 写博客</h5><p>git bash 进入hexo目录执行<code>hexo new &#39;blog名称&#39;</code><br>hexo 会自动在_post目录生成相应的md文件(当然,你也可以自己创建md文件,没有任何区别)<br>我们只需要打开md文件就可以开始写博客了,md使用markdown语法,不懂得同学可以参考<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">markdown语法</a><br>md文件完整格式如下:</p><pre><code>---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文</code></pre><h5 id="4-12-md文件编辑工具"><a href="#4-12-md文件编辑工具" class="headerlink" title="4.12 md文件编辑工具"></a>4.12 md文件编辑工具</h5><p>个人使用markdownpad编辑md文件,感觉还不错.</p><h5 id="4-13-博文只显示部分内容"><a href="#4-13-博文只显示部分内容" class="headerlink" title="4.13 博文只显示部分内容"></a>4.13 博文只显示部分内容</h5><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><pre><code># 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等；</code></pre><h4 id="5-最终效果"><a href="#5-最终效果" class="headerlink" title="5 最终效果"></a>5 最终效果</h4><p>我的博客:<a href="https://hgsghost.github.io/" target="_blank" rel="noopener">https://hgsghost.github.io/</a></p><h1 id="最后-感谢耐心看完这篇文章的各位童鞋"><a href="#最后-感谢耐心看完这篇文章的各位童鞋" class="headerlink" title="最后,感谢耐心看完这篇文章的各位童鞋!"></a>最后,感谢耐心看完这篇文章的各位童鞋!</h1><h4 id="6-参考"><a href="#6-参考" class="headerlink" title="6 参考"></a>6 参考</h4><p><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p><h4 id="7-我的github"><a href="#7-我的github" class="headerlink" title="7 我的github"></a>7 我的github</h4><p>地址:<a href="https://github.com/hgsghost" target="_blank" rel="noopener">https://github.com/hgsghost</a></p><h1 id="感兴趣的童鞋大家一起学习"><a href="#感兴趣的童鞋大家一起学习" class="headerlink" title="感兴趣的童鞋大家一起学习!"></a>感兴趣的童鞋大家一起学习!</h1><p><img src="/2018/04/02/helloWorld/thanks.png" alt="感谢"></p><p>copyright ©2018-2020 hgsghost</p><p>【转载文章务必保留出处和署名，谢谢！】</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2013/12/02/hello-world/"/>
      <url>/2013/12/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
